<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[css常用居中方法]]></title>
    <url>%2F2017%2F05%2F06%2Fcss%2F</url>
    <content type="text"><![CDATA[水平居中分两种情况：行内元素 还是 块状元素 ，块状元素里面又分为定宽块状元素，以及不定宽块状元素 行内元素 如果设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的 定宽块状元素 满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的 不定宽块状元素方法(一)加入 table 标签： 是利用table标签的长度自适应性—即不定义其长度也不默认父元素body的长度（table其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的margin的方法，使其水平居中 缺点：增加了无语义标签 不定宽块状元素方法(二)display：inline： 改变块级元素的 display 为 inline 类型（设置为 行内元素 显示），然后使用 text-align:center 来实现居中效果 缺点：元素变成行内样式，不能设置长度值 不定宽块状元素方法(三)使用float和position： 通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。 缺点：需要清除浮动 垂直居中分两种情况：父元素高度确定的单行文本，以及父元素高度确定的多行文本 父元素高度确定的单行文本 设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。 缺点：当文字内容的长度大于块的宽时，就有内容脱离了块 父元素高度确定的多行文本(一) 使用插入 table (包括tbody、tr、td)标签，同时设置 vertical-align：middle。 css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用 缺点：增加了无语义标签 父元素高度确定的多行文本（二） 在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align 属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差 缺点：兼容性不好，修改display的block变成了table-cell，破坏了原有的块状元素的性质。 垂直水平居中(块级) 固定宽高的块级 设置position：absolute top: 50% left: 50% 再给元素设置负外边距,大小为元素宽高的一半123456width: 400px;height: 200px;position: absolute;top: 50%;left: 50%;margin: -100px 0 0 -200px; 不固定宽高的块级元素 一样设置position：absolute top: 50% left: 50% 设置边距12345position: absolete;top: 50%;left: 50%;transform: translate(-50%,-50%);/*单独设置水平/垂直方向：transform: translateY: (-50%);*/ 隐性改变display类型 position：absolute float：left或float：right设置以上语句的元素display自动变为inline-block的方式]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown语法]]></title>
    <url>%2F2017%2F03%2F10%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[MarkDown语法概述：Markdown 是一种轻量级标记语言，创始人为約翰·格魯伯（John Gruber）。 它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 1.段落和换行 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进 段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 br 标签。如果你确实想要依赖 Markdown 来插入 br 标签的话，在插入处先按入两个以上的空格然后回车。 2.标题在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：这是 H1这是 H2这是 H63.区块引用区块引用是使用类似 email 中用 &gt; 的引用方式，在每行的最前面加上 &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： This is the first level of quoting. This is nested blockquote. Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 4.列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： * Red * Green * Blue 有序列表则使用数字接着一个英文句点： 1. Bird 2. McHale 3. Parish 5.代码区块要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：这是一个普通段落： 这是一个代码区块。 Markdown 会转换成： &lt;p&gt;这是一个普通段落：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt; 6.分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：* * * *** ***** - - - --------------------------------------- 7.链接 要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。 8.强调Markdown 使用星号（）和底线（_）作为标记强调字词的符号，被 或 _ 包围的字词会被转成用 em&gt;标签包围，用两个 * 或 _ 包起来的话，则会被转成 strong，例如：*single asterisks* _single underscores_ **double asterisks** __double underscores__ 9.小段代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：Use the `printf()` function. 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：``There is a literal backtick (`) here.`` 10.图片 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。语法：![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 11.编辑器离线： Atom MarkPad在线：-Markable.in-马克飞象 &gt;&gt;更多资源]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2F2017%2F02%2F18%2Fgit%2F</url>
    <content type="text"><![CDATA[1.新建代码库 在当前目录新建一个Git代码库 1$ git init 新建一个目录，将其初始化为Git代码库 1$ git init [project-name] 下载一个项目和它的整个代码历史 1$ git clone [url] 2.配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 显示当前的Git配置 1$ git config --list 编辑Git配置文件 1$ git config -e [--global] 设置提交代码时的用户信息 12$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 3.增加、删除文件 添加指定文件到暂存区 1$ git add [file1] [file2] ... 添加指定目录到暂存区，包括子目录 1$ git add [dir] 添加当前目录的所有文件到暂存区 1$ git add . 添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交 1$ git add -p 删除工作区文件，并且将这次删除放入暂存区 1$ git rm [file1] [file2] ... 停止追踪指定文件，但该文件会保留在工作区 1$ git rm --cached [file] 改名文件，并且将这个改名放入暂存区 1$ git mv [file-original] [file-renamed] 4.代码提交 提交暂存区到仓库区 1$ git commit -m [message] 提交暂存区的指定文件到仓库区 1$ git commit [file1] [file2] ... -m [message] 提交工作区自上次commit之后的变化，直接到仓库区 1$ git commit -a 提交时显示所有diff信息 1$ git commit -v 使用一次新的commit，替代上一次提交,如果代码没有任何新变化，则用来改写上一次commit的提交信息 1$ git commit --amend -m [message] 重做上一次commit，并包括指定文件的新变化 1$ git commit --amend [file1] [file2] ... 5.分支 列出所有本地分支 1$ git branch 列出所有远程分支 1$ git branch -r 列出所有本地分支和远程分支 1$ git branch -a 新建一个分支，但依然停留在当前分支 1$ git branch [branch-name] 新建一个分支，并切换到该分支 1$ git checkout -b [branch] 新建一个分支，指向指定commit 1$ git branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系 1$ git branch --track [branch] [remote-branch] 切换到指定分支，并更新工作区 1$ git checkout [branch-name] 切换到上一个分支 1$ git checkout - 建立追踪关系，在现有分支与指定的远程分支之间 1$ git branch --set-upstream [branch] [remote-branch] 合并指定分支到当前分支 1$ git merge [branch] 选择一个commit，合并进当前分支 1$ git cherry-pick [commit] 删除分支 1$ git branch -d [branch-name] 删除远程分支 12$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 6.标签 列出所有tag 1$ git tag 新建一个tag在当前commit 1$ git tag [tag] 新建一个tag在指定commit 1$ git tag [tag] [commit] 删除本地tag 1$ git tag -d [tag] 删除远程tag 1$ git push origin :refs/tags/[tagName] 查看tag信息 1$ git show [tag] 提交指定tag 1$ git push [remote] [tag] 提交所有tag 1$ git push [remote] --tags 新建一个分支，指向某个tag 1$ git checkout -b [branch] [tag] 7.查看信息 显示有变更的文件 1$ git status 显示当前分支的版本历史 1$ git log 显示commit历史，以及每次commit发生变更的文件 1$ git log --stat 搜索提交历史，根据关键词 1$ git log -S [keyword] 显示某个commit之后的所有变动，每个commit占据一行 1$ git log [tag] HEAD --pretty=format:%s 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件 1$ git log [tag] HEAD --grep feature 显示某个文件的版本历史，包括文件改名 12$ git log --follow [file]$ git whatchanged [file] 显示指定文件相关的每一次diff 1$ git log -p [file] 显示过去5次提交 1$ git log -5 --pretty --oneline 显示所有提交过的用户，按提交次数排序 1$ git shortlog -sn 显示指定文件是什么人在什么时间修改过 1$ git blame [file] 显示暂存区和工作区的差异 1$ git diff 显示暂存区和上一个commit的差异 1$ git diff --cached [file] 显示工作区与当前分支最新commit之间的差异 1$ git diff HEAD 显示两次提交之间的差异 1$ git diff [first-branch]...[second-branch] 显示今天你写了多少行代码 1$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot; 显示某次提交的元数据和内容变化 1$ git show [commit] 显示某次提交发生变化的文件 1$ git show --name-only [commit] 显示某次提交时，某个文件的内容 1$ git show [commit]:[filename] 显示当前分支的最近几次提交 1$ git reflog 8.远程同步 下载远程仓库的所有变动 1$ git fetch [remote] 显示所有远程仓库 1$ git remote -v 显示某个远程仓库的信息 1$ git remote show [remote] 增加一个新的远程仓库，并命名 1$ git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并 1$ git pull [remote] [branch] 上传本地指定分支到远程仓库 1$ git push [remote] [branch] 强行推送当前分支到远程仓库，即使有冲突 1$ git push [remote] --force 推送所有分支到远程仓库 1$ git push [remote] --all 9.撤销 恢复暂存区的指定文件到工作区 1$ git checkout [file] 恢复某个commit的指定文件到暂存区和工作区 1$ git checkout [commit] [file] 恢复暂存区的所有文件到工作区 1$ git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 1$ git reset [file] 重置暂存区与工作区，与上一次commit保持一致 1$ git reset --hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 1$ git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 1$ git reset --hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变 1$ git reset --keep [commit] 新建一个commit，用来撤销指定commit,后者的所有变化都将被前者抵消，并且应用到当前分支 1$ git revert [commit] 暂时将未提交的变化移除，稍后再移入 12$ git stash$ git stash pop 其他 生成一个可供发布的压缩包 1$ git archive ——完—— 原创地址]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F02%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
